//==============================================
//SORGULAR(QUERIES) https://docs.mongodb.com/manual/reference/operator/query-comparison/
//==============================================


//----------------------------------------
//QUERY : "urunler" adinda bir veritabani ve icerisinde "fiyatlar" adinda bir collection create ediniz
//----------------------------------------
use("urunler");

//----------------------------------------
//QUERY 2: asagidaki dokumanlari collection'a insert edip listeleyiniz.
//----------------------------------------
use("urunler");
db.fiyatlar.insertMany([{"urunAdi":"TV",fiyat:5000,vergi:10,
"summary":[{"version":1},{"show":"yok"}]},
{"urunAdi":"Telefon",fiyat:3500,vergi:20,"hediye":"kapak"},
{"urunAdi":"Utu",fiyat:1500,vergi:5},
{"urunAdi":"Koltuk",fiyat:5000,vergi:10},
{"urunAdi":"Buzdolabi",fiyat:4000,vergi:10}]);
//----------------------------------------
//QUERY 3: ilk uc dokumani listeleyiniz. ---limit() methodu
//----------------------------------------
use("urunler");
db.fiyatlar.find().limit(3);
//fiyatlar collectiondaki datalar listelenip ilk 3 data filtrelendi

//----------------------------------------
//QUERY 4:Sadece 2. ve 3. dokumanlari listeleyiniz 
//----------------------------------------
use("urunler");
db.fiyatlar.find().skip(1).limit(2);
db.fiyatlar.find().limit(2).skip(1);

//----------------------------------------
//QUERY 5: 1. dokumanlari listeleyiniz 
//----------------------------------------
use("urunler");
db.fiyatlar.findOne();
db.fiyatlar.find().limit(1);

//==============================================
//LOGICAL QUERY OPERATOR(mantiksal dogru)($and, $or,$not,$nor)
//SYNTAX: {$and: [{ifade1},{ifade2}, ..., {ifadeN} ] } nor ve or, and gibi bencil
// { field: { $not: { <operator-ifade>} } } ==> ({"vergi: {$not: {$eq:10}}});
//===================================================

//----------------------------------------
//QUERY 6: fiyat=5000 olan ve urunAdi="TV" olan dokumanlari listeleyiniz. 
//----------------------------------------
use("urunler");
db.fiyatlar.find({$and:[{fiyat:5000},{urunAdi:"TV"}]});

//----------------------------------------
//QUERY 7: urunAdi="Utu" olan veya vergi=5 olan dokumanlari listeleyiniz. 
//----------------------------------------
use("urunler");
db.fiyatlar.find({$or:[{urunAdi:"Utu"},{vergi:10}]});


//----------------------------------------
//QUERY 8: fiyat=5000 olan urunleri listeleyiniz. 
//----------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$eq:5000},$comment:"fiyati 5000 olanlari tespit ettik"});
db.fiyatlar.find({fiyat:5000}); //basic query
//2. kod daha hizli calisir
//Note: $ herzaman {} ister ama comment haric

//----------------------------------------
//QUERY 9: (urunAdi=TV vergi=10) olmayan dokumanlari listeleyiniz, nor = hicbiri
//----------------------------------------
use("urunler");
db.fiyatlar.find({$nor:[{urunAdi:"TV"},{vergi:10}]});


//----------------------------------------
//QUERY 10: urunAdi=TV olan kayitlarin sadece fiyat'ini listeleyiniz
//----------------------------------------
use("urunler");
db.fiyatlar.find({urunAdi:"TV"},{fiyat:1,_id:0});

//  (Bu isleme Projection denilmektedir)

//Projection'da gosterilmek istenen Field'a 1 degeri atanir Ornegin:
//{"fiyat":1},gosterilmek istenmeyenler ise yazilmaz.
//Sadece _id icin bir istisna vardir. Onu istemiyorsa 0 ile belirtilir.

//SYNTAX db.collection.find( {query}, {projextion}). ayni kisinin fiyatini id sini istedigi icin ayni parantez, suslunun biri filtreleme sartlari icin, biri gostermek istedgimiz field lar icin

// --------------------------------------------
//QUERY 10: Tum dokumanlarin sedece fiyat ve urunAdini listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({},{fiyat:1,urunAdi:1,_id:0});
//Note: projection komutu icin query yoksa find({},{projection}) seklinde olusturulmali...sorgu yoksa { }

//==============================================
//    COMPARISON(KArsilastirma) OPERATOR
// $eq : esit mi
// $lt : kucuk mu (less than) 
// $gt : buyuk mi (greater than)
// $lte : kucuk esit mi
// $gte : buyuk esit mi
// $ne : esit degil mi
// $in : belirtilen degerler, bir dizideki degerlerden birisine esit mi
// $nin : belirtilen degerler, bir dizideki tum degerlere esit degil mi
//SYNTAX : {field: {$gte: value} }
//==============================================

// --------------------------------------------
//QUERY 12: fiyati 3500'e esit veya daha fazla olan URUNLERI sadece urunAdi ve fiyatini listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$gte:3500}},{fiyat:1,urunAdi:1,_id:0});


// --------------------------------------------
//QUERY 13: fiyati 4000'e esit veya daha kucuk olan URUNLERI sadece urunADI listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$lte:4000}},{urunAdi:1, _id:0});

// --------------------------------------------
//QUERY 14: fiyati 1500 veya 3500 veya 7000 olan URUNLERI listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$in:[1500,3500,7000]}});


// --------------------------------------------
//QUERY 15: fiyati 1500 veya 3500 veya 7000 olmayan URUNLERI listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$nin:[1500,3500,7000]}});


// --------------------------------------------
//QUERY 16: fiyati 5000'den kucuk olup urunAdi Utu olmayan URUNLER icin SADECE urunADi ve fiyat bilgilerini listeleyiniz
//---------------------------------------------
use("urunler");
db.fiyatlar.find({fiyat:{$lt:5000},//fiyat field'i 5000den kucuk
urunAdi:{$ne:"Utu"}}//urun adi utu olmayanlari listeledi
,{urunAdi:1,fiyat:1,_id:0});//sadece urunadi ve fiyatlari listeledi

// --------------------------------------------
//QUERY 17: fiyati 4000'den kucuk olan VEYA urunAdi koltuk olan urunler icin SADECE urunADi ve fiyat bilgilerini listeleyiniz
//---------------------------------------------

use("urunler");
db.fiyatlar.find({$or:[{fiyat:{$lt:4000}},{urunAdi:"Koltuk"}]},{urunAdi:1,fiyat:1,_id:0});


// --------------------------------------------
//QUERY 18: URUNLERIN tamamini SADECE urunAdini gosterecek sekilde fiyatlarina gore artan sirada listeleyiniz.
//   1 : artan -1: azalan
//---------------------------------------------

use("urunler");
db.fiyatlar.find({},{urunAdi:1,_id:0})//tum elementler sorgulanip sadece urunAdi gosterildi
.sort({fiyat:1});//fiyata gore k->b siralama yapildi


// --------------------------------------------
//QUERY 19: URUNLERIN tamamini SADECE urunAdini gosterecek sekilde fiyatlarina gore azalan sirada listeleyiniz.
//   1 : artan -1: azalan
//---------------------------------------------

use("urunler");
db.fiyatlar.find({},{urunAdi:1,_id:0})//tum elementler sorgulanip sadece urunAdi gosterildi
.sort({fiyat:-1});//siralama fiyata gore b->k yapildi

// --------------------------------------------
//QUERY 20: fiyati 5000 olan URUNLERI, urunAdi'na gore siralayarak (A-Z) listeleyiniz
//   ekstra eleman ekle fiyat 5000 olan
//---------------------------------------------
//1: A-Z, -1: Z-A (ASCII formatina gore siralama yapar)

use("urunler");
db.fiyatlar.find({fiyat:5000})//fiyati 5000 olan elementler listelendi
.sort({urunAdi:1});//siralama urunAdina goze a-z yapildi


